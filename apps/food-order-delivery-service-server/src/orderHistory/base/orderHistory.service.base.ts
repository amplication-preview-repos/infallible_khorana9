/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OrderHistory as PrismaOrderHistory,
  Order as PrismaOrder,
} from "@prisma/client";

export class OrderHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderHistory.count(args);
  }

  async orderHistories(
    args: Prisma.OrderHistoryFindManyArgs
  ): Promise<PrismaOrderHistory[]> {
    return this.prisma.orderHistory.findMany(args);
  }
  async orderHistory(
    args: Prisma.OrderHistoryFindUniqueArgs
  ): Promise<PrismaOrderHistory | null> {
    return this.prisma.orderHistory.findUnique(args);
  }
  async createOrderHistory(
    args: Prisma.OrderHistoryCreateArgs
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.create(args);
  }
  async updateOrderHistory(
    args: Prisma.OrderHistoryUpdateArgs
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.update(args);
  }
  async deleteOrderHistory(
    args: Prisma.OrderHistoryDeleteArgs
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.delete(args);
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }
}
